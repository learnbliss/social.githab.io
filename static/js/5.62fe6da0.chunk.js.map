{"version":3,"sources":["components/common/FormsControl/FormsControl.js","components/common/FormsControl/FormsControl.module.scss","utils/validators/validators.js","components/Dialogs/Dialogs.module.scss","components/Dialogs/DialogItem/DialogItem.module.scss","components/Dialogs/DialogsForm/DialogsForm.module.scss","components/Dialogs/DialogItem/DialogItem.js","components/Dialogs/Message/Message.js","components/Dialogs/DialogsForm/DialogsForm.js","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.js","components/Dialogs/DialogsContainer.tsx"],"names":["TextArea","input","meta","props","hasError","touched","error","className","styles","formControl","CustomInput","module","exports","required","value","maxLengthCreator","maxLength","length","DialogItem","dialogItem","to","id","activeClassName","active","src","avatar","alt","name","Message","message","maxLenght50","reduxForm","form","onSubmit","handleSubmit","Field","component","validate","style","justifySelf","compose","Component","connect","state","isAuth","auth","dialogs","messages","dialogItems","map","item","key","title","messageItems","console","log","addMessageAC","messageText","DialogsContainer","messagesPage","dispatch","Dialogs"],"mappings":"yOAGaA,EAAW,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAE3CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,GAAYI,IAAOF,QAC3D,8CAAcL,EAAWE,IACxBC,GACD,6BACI,8BAAOF,EAAKI,UAMfI,EAAc,SAAC,GAA6B,IAA5BT,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAE9CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,GAAYI,IAAOF,QAC3D,2CAAWL,EAAWE,IACrBC,GACD,6BACI,8BAAOF,EAAKI,W,oBC1B5BK,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,iCCD1E,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRRL,EAAOC,QAAU,CAAC,QAAU,yBAAyB,YAAc,6BAA6B,aAAe,gC,oBCA/GD,EAAOC,QAAU,CAAC,OAAS,2BAA2B,WAAa,iC,oBCAnED,EAAOC,QAAU,CAAC,KAAO,4B,wGCiBVM,EAZI,SAACf,GAChB,OACI,yBAAKI,UAAWC,IAAOW,YACnB,kBAAC,IAAD,CAASC,GAAE,mBAAcjB,EAAMkB,IACtBC,gBAAiBd,IAAOe,QAC7B,yBAAKC,IAAKrB,EAAMsB,OACXC,IAAI,WAAWvB,EAAMwB,QCD3BC,EARC,SAAAzB,GACZ,OACI,6BACKA,EAAM0B,U,8DCAbC,EAAcf,YAAiB,IAatBgB,cAAU,CACrBC,KAAM,WADKD,EAXK,SAAA5B,GAChB,OACI,0BAAM8B,SAAU9B,EAAM+B,aAAc3B,UAAWC,IAAOwB,MAClD,kBAACG,EAAA,EAAD,CAAOC,UAAWpC,IACX2B,KAAK,cACZU,SAAU,CAACxB,IAAUiB,KACrB,4BAAQQ,MAAO,CAACC,YAAa,UAA7B,gB,gBCoCGC,eC9CkB,SAACC,GAS9B,OAAOC,aAAQ,SAACC,GACZ,MAAO,CACHC,OAAQD,EAAME,KAAKD,UAExB,KAJIF,EARmB,SAACvC,GACvB,OAAKA,EAAMyC,OAIP,kBAACH,EAActC,GAHR,kBAAC,IAAD,CAAUiB,GAAI,gBD2ClBoB,EAnCsB,SAAArC,GAAU,IACpC2C,EAAqB3C,EAArB2C,QAASC,EAAY5C,EAAZ4C,SAOhB,OACI,yBAAKxC,UAAWC,IAAOsC,SACnB,yBAAKvC,UAAWC,IAAOwC,aAClBF,EAAQG,KAAI,SAACC,GACV,OACI,kBAAC,EAAD,CAAYC,IAAKD,EAAK7B,GACVA,GAAI6B,EAAK7B,GACTM,KAAMuB,EAAKvB,KACXF,OAAQyB,EAAKzB,OACb2B,MAAO,wBAI/B,yBAAK7C,UAAWC,IAAO6C,cACnB,kBAAC,EAAD,CAAapB,SAnBN,SAACJ,GAChByB,QAAQC,IAAI,YAAa1B,GACzB1B,EAAMqD,aAAa3B,EAAQ4B,gBAoBlBV,EAASE,KAAI,SAACC,GACX,OACI,kBAAC,EAAD,CAASC,IAAKD,EAAK7B,GAAIQ,QAASqB,EAAKrB,kB,QEWvD6B,EAAmBhB,aAfD,SAACC,GACrB,MAAO,CACHG,QAASH,EAAMgB,aAAab,QAC5BC,SAAUJ,EAAMgB,aAAaZ,aAIV,SAACa,GACxB,MAAO,CACHJ,aAAc,SAAC3B,GACX+B,EAASJ,YAAa3B,QAKTa,CAA2GmB,GAErHH","file":"static/js/5.62fe6da0.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from './FormsControl.module.scss'\n\nexport const TextArea = ({input, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error;\n\n    return (\n        <div className={styles.formControl + \" \" + (hasError && styles.error)}>\n            <textarea {...input} {...props}/>\n            {hasError &&\n            <div>\n                <span>{meta.error}</span>\n            </div>}\n        </div>\n    )\n};\n\nexport const CustomInput = ({input, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error;\n\n    return (\n        <div className={styles.formControl + \" \" + (hasError && styles.error)}>\n            <input {...input} {...props}/>\n            {hasError &&\n            <div>\n                <span>{meta.error}</span>\n            </div>}\n        </div>\n    )\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__wuZVb\",\"error\":\"FormsControl_error___gyw5\"};","export const required = (value) => {\n    if (value) {\n        return undefined\n    }\n    return 'Field is required'\n};\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n    return undefined\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"dialogs\":\"Dialogs_dialogs__2Gkkf\",\"dialogItems\":\"Dialogs_dialogItems__3S8JU\",\"messageItems\":\"Dialogs_messageItems__1UJNf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"active\":\"DialogItem_active__JdILs\",\"dialogItem\":\"DialogItem_dialogItem__1nzJQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"DialogsForm_form__3AICM\"};","import React from 'react';\nimport styles from './DialogItem.module.scss'\nimport {NavLink} from 'react-router-dom';\n\n\n\nconst DialogItem = (props) => {\n    return (\n        <div className={styles.dialogItem}>\n            <NavLink to={`/dialogs/${props.id}`}\n                     activeClassName={styles.active}>\n                <img src={props.avatar}\n                     alt='avatar'/>{props.name}\n            </NavLink>\n        </div>\n    );\n};\n\nexport default DialogItem;","import React from 'react';\n// import styles from './Message.module.scss'\n\nconst Message = props => {\n    return (\n        <div>\n            {props.message}\n        </div>\n    );\n};\n\nexport default Message;","import React from 'react';\nimport styles from './DialogsForm.module.scss'\nimport {Field, reduxForm} from \"redux-form\";\nimport {TextArea} from \"../../common/FormsControl/FormsControl\";\nimport {maxLengthCreator, required} from \"../../../utils/validators/validators\";\n\nconst maxLenght50 = maxLengthCreator(50);\n\nconst DialogsForm = props => {\n    return (\n        <form onSubmit={props.handleSubmit} className={styles.form}>\n            <Field component={TextArea}\n                   name=\"messageText\"\n            validate={[required, maxLenght50]}/>\n            <button style={{justifySelf: 'start'}}>add post</button>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'dialogs'\n})(DialogsForm);","import React from 'react';\nimport styles from './Dialogs.module.scss'\nimport DialogItem from './DialogItem/DialogItem';\nimport Message from './Message/Message';\nimport {compose} from \"redux\";\nimport DialogsForm from \"./DialogsForm/DialogsForm\";\nimport {widthAuthRedirect} from \"../../hoc/withAuthRedirect\";\nimport {dialogsType, messagesType} from \"../../types/types\";\n\ntype PropTypes = {\n    dialogs: Array<dialogsType>,\n    messages: Array<messagesType>,\n    addMessageAC: (message: string) => void,\n}\n\nconst Dialogs: React.FC<PropTypes> = props => {\n    const {dialogs, messages} = props;\n\n    const addMessage = (message: any) => {\n        console.log('message: ', message);\n        props.addMessageAC(message.messageText)\n    };\n\n    return (\n        <div className={styles.dialogs}>\n            <div className={styles.dialogItems}>\n                {dialogs.map((item) => {\n                    return (\n                        <DialogItem key={item.id}\n                                    id={item.id}\n                                    name={item.name}\n                                    avatar={item.avatar}\n                                    title={'test TypeScript'}/>\n                    )\n                })}\n            </div>\n            <div className={styles.messageItems}>\n                <DialogsForm onSubmit={addMessage}/>\n                {/*<textarea value={textArea} onChange={pushDialog}/>*/}\n                {/*<button onClick={addMessage} style={{justifySelf: 'start'}}>add post</button>*/}\n                {messages.map((item) => {\n                    return (\n                        <Message key={item.id} message={item.message}/>\n                    )\n                })}\n            </div>\n        </div>\n    );\n};\n\nexport default compose(\n    widthAuthRedirect,\n)(Dialogs);\n\n// export default widthAuthRedirect(Dialogs);","import React from 'react';\nimport {Redirect} from \"react-router-dom\";\nimport {connect} from \"react-redux\";\n\nexport const widthAuthRedirect = (Component) => {\n    const RedirectComponent = (props) => {\n        if (!props.isAuth) {\n            return <Redirect to={'/login'}/>\n        }\n        return (\n            <Component {...props}/>\n        );\n    };\n    return connect((state) => {\n        return {\n            isAuth: state.auth.isAuth,\n        }\n    }, null)(RedirectComponent);\n};","// import React from 'react';\nimport Dialogs from './Dialogs';\nimport {addMessageAC} from '../../reducers/messagesReducer';\nimport {connect} from 'react-redux';\nimport {stateType} from \"../../redux/redux\";\nimport {dialogsType, messagesType} from \"../../types/types\";\n\ntype mapStateToPropsType = {\n    dialogs: Array<dialogsType>,\n    messages: Array<messagesType>,\n};\ntype mapStateToDispatchType = {\n    addMessageAC: (message: string) => void\n};\n\n// const DialogsContainer = props => {\n//     return (\n//         <ContextStore.Consumer>\n//             {(store) => {\n//                 const pushDataToStateDialog = (text) => {\n//                     store.dispatch(pushDataToStateDialogAC(text))\n//                 };\n//                 const addMessage = () => {\n//                     store.dispatch(addMessageAC())\n//                 };\n//                 return (\n//                     <Dialogs pushDataToStateDialog={pushDataToStateDialog}\n//                              addMessage={addMessage}\n//                              dialogs={store.getState().messagesPage.dialogs}\n//                              messages={store.getState().messagesPage.messages}\n//                              textArea={store.getState().messagesPage.textArea}\n//                     />\n//                 )\n//             }}\n//         </ContextStore.Consumer>\n//     );\n// };\n\nconst mapStateToProps = (state: stateType) => {\n    return {\n        dialogs: state.messagesPage.dialogs,\n        messages: state.messagesPage.messages,\n    }\n};\n\nconst mapStateToDispatch = (dispatch: any) => {\n    return {\n        addMessageAC: (message: string) => {\n            dispatch(addMessageAC(message))\n        },\n    }\n};\n\nconst DialogsContainer = connect<mapStateToPropsType, mapStateToDispatchType, null, stateType>(mapStateToProps, mapStateToDispatch)(Dialogs);\n\nexport default DialogsContainer;"],"sourceRoot":""}