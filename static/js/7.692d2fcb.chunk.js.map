{"version":3,"sources":["components/common/FormsControl/FormsControl.js","components/common/FormsControl/FormsControl.module.scss","utils/validators/validators.js","components/Login/LoginForm/LoginForm.module.scss","components/Login/Login.module.scss","components/Login/LoginForm/LoginForm.js","components/Login/Login.js","components/Login/LoginContainer.tsx"],"names":["TextArea","input","meta","props","hasError","touched","error","className","styles","formControl","CustomInput","module","exports","required","value","maxLengthCreator","maxLength","length","reduxForm","form","handleSubmit","loginForm","onSubmit","Field","component","name","validate","type","placeholder","captchaUrl","src","alt","validation","formSummaryError","Login","isAuth","to","auth","formData","email","password","rememberMe","captcha","loginThunk","connect","state","dispatch","getCaptchaUrlThunk"],"mappings":"yOAGaA,EAAW,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAE3CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,GAAYI,IAAOF,QAC3D,8CAAcL,EAAWE,IACxBC,GACD,6BACI,8BAAOF,EAAKI,UAMfI,EAAc,SAAC,GAA6B,IAA5BT,EAA2B,EAA3BA,MAAOC,EAAoB,EAApBA,KAASC,EAAW,gCAE9CC,EAAWF,EAAKG,SAAWH,EAAKI,MAEtC,OACI,yBAAKC,UAAWC,IAAOC,YAAc,KAAOL,GAAYI,IAAOF,QAC3D,2CAAWL,EAAWE,IACrBC,GACD,6BACI,8BAAOF,EAAKI,W,oBC1B5BK,EAAOC,QAAU,CAAC,YAAc,kCAAkC,MAAQ,8B,iCCD1E,oEAAO,IAAMC,EAAW,SAACC,GACrB,IAAIA,EAGJ,MAAO,qBAGEC,EAAmB,SAACC,GAAD,OAAe,SAACF,GAC5C,GAAIA,EAAMG,OAASD,EACf,MAAM,iBAAN,OAAwBA,EAAxB,e,oBCRRL,EAAOC,QAAU,CAAC,UAAY,6BAA6B,iBAAmB,sC,oBCA9ED,EAAOC,QAAU,CAAC,KAAO,sB,oIC4CVM,cAAU,CACrBC,KAAM,SADKD,EAvCG,SAAAf,GAAU,IACjBiB,EAAuBjB,EAAvBiB,aAAcd,EAASH,EAATG,MACrB,OACI,0BAAMC,UAAWC,IAAOa,UAAWC,SAAUF,GACzC,6BACI,kBAACG,EAAA,EAAD,CAAOC,UAAWd,IACXe,KAAK,QACLC,SAAU,CAACb,KACXc,KAAK,OAAOC,YAAY,WAEnC,6BACI,kBAACL,EAAA,EAAD,CAAOC,UAAWd,IACXe,KAAK,WACLC,SAAU,CAACb,KACXc,KAAK,WAAWC,YAAY,cAEvC,6BACI,kBAACL,EAAA,EAAD,CAAOC,UAAWd,IACXe,KAAK,aACLE,KAAK,aAHhB,oFAMCxB,EAAM0B,YAAc,yBAAKC,IAAK3B,EAAM0B,WAAYE,IAAI,YACpD5B,EAAM0B,YAAc,kBAACN,EAAA,EAAD,CAAOC,UAAW,QACXC,KAAK,UACLO,WAAY,CAACnB,OAExCP,GACG,yBAAKC,UAAWC,IAAOyB,kBAClB3B,GAGT,6BACI,sD,QCfD4B,EAnBD,SAAA/B,GAOV,OAAIA,EAAMgC,OACC,kBAAC,IAAD,CAAUC,GAAI,aAIrB,yBAAK7B,UAAWC,IAAO6B,MACnB,2CACA,kBAAC,EAAD,CAAWf,SAZF,SAACgB,GAAc,IACrBC,EAAwCD,EAAxCC,MAAOC,EAAiCF,EAAjCE,SAAUC,EAAuBH,EAAvBG,WAAYC,EAAWJ,EAAXI,QACpCvC,EAAMwC,WAAWJ,EAAOC,EAAUC,EAAYC,IAUXb,WAAY1B,EAAM0B,e,gBCK9Ce,uBACX,SAACC,GACG,MAAO,CACHV,OAAQU,EAAMR,KAAKF,OACnBN,WAAYgB,EAAMR,KAAKR,eAG/B,SAACiB,GACG,MAAO,CACHH,eACAI,0BAVGH,EAN6B,SAACzC,GACzC,OACI,kBAAC,EAAUA","file":"static/js/7.692d2fcb.chunk.js","sourcesContent":["import React from \"react\";\nimport styles from './FormsControl.module.scss'\n\nexport const TextArea = ({input, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error;\n\n    return (\n        <div className={styles.formControl + \" \" + (hasError && styles.error)}>\n            <textarea {...input} {...props}/>\n            {hasError &&\n            <div>\n                <span>{meta.error}</span>\n            </div>}\n        </div>\n    )\n};\n\nexport const CustomInput = ({input, meta, ...props}) => {\n\n    const hasError = meta.touched && meta.error;\n\n    return (\n        <div className={styles.formControl + \" \" + (hasError && styles.error)}>\n            <input {...input} {...props}/>\n            {hasError &&\n            <div>\n                <span>{meta.error}</span>\n            </div>}\n        </div>\n    )\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControl_formControl__wuZVb\",\"error\":\"FormsControl_error___gyw5\"};","export const required = (value) => {\n    if (value) {\n        return undefined\n    }\n    return 'Field is required'\n};\n\nexport const maxLengthCreator = (maxLength) => (value) => {\n    if (value.length > maxLength) {\n        return `Max length is ${maxLength} symbols`;\n    }\n    return undefined\n};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginForm\":\"LoginForm_loginForm__2odaZ\",\"formSummaryError\":\"LoginForm_formSummaryError__2dNse\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"auth\":\"Login_auth__1OFR6\"};","import React from 'react';\nimport styles from './LoginForm.module.scss'\nimport {Field, reduxForm} from \"redux-form\";\nimport {CustomInput} from \"../../common/FormsControl/FormsControl\";\nimport {required} from \"../../../utils/validators/validators\";\n\nconst LoginForm = props => {\n    const {handleSubmit, error} = props;\n    return (\n        <form className={styles.loginForm} onSubmit={handleSubmit}>\n            <div>\n                <Field component={CustomInput}\n                       name=\"email\"\n                       validate={[required]}\n                       type=\"text\" placeholder=\"email\"/>\n            </div>\n            <div>\n                <Field component={CustomInput}\n                       name=\"password\"\n                       validate={[required]}\n                       type=\"password\" placeholder=\"password\"/>\n            </div>\n            <div>\n                <Field component={CustomInput}\n                       name=\"rememberMe\"\n                       type=\"checkbox\"/> Запомнить меня\n            </div>\n\n            {props.captchaUrl && <img src={props.captchaUrl} alt=\"captcha\"/>}\n            {props.captchaUrl && <Field component={'input'}\n                                        name=\"captcha\"\n                                        validation={[required,]}/>}\n\n            {error && (\n                <div className={styles.formSummaryError}>\n                    {error}\n                </div>\n            )}\n            <div>\n                <button>Login me now!</button>\n            </div>\n        </form>\n    );\n};\n\nexport default reduxForm({\n    form: 'login'\n})(LoginForm);","import React from 'react';\nimport styles from './Login.module.scss'\nimport LoginForm from \"./LoginForm/LoginForm\";\nimport {Redirect} from \"react-router-dom\";\n\nconst Login = props => {\n\n    const onSubmit = (formData) => {\n        const {email, password, rememberMe, captcha} = formData;\n        props.loginThunk(email, password, rememberMe, captcha)\n    };\n\n    if (props.isAuth) {\n        return <Redirect to={'/profile'}/>\n    }\n\n    return (\n        <div className={styles.auth}>\n            <h1>Enter site:</h1>\n            <LoginForm onSubmit={onSubmit} captchaUrl={props.captchaUrl}/>\n        </div>\n    );\n};\n\nexport default Login;","import React from 'react';\nimport Login from \"./Login\";\nimport {connect} from \"react-redux\";\nimport {getCaptchaUrlThunk, loginThunk} from \"../../reducers/authReducer\";\nimport {stateType} from \"../../redux/redux\";\n\ntype mapStateType = {\n    isAuth: boolean,\n    captchaUrl: string | null,\n}\n\ntype mapDispatchType = {\n    loginThunk: (email: string, password: string, rememberMe: boolean, captcha: string) => void,\n    getCaptchaUrlThunk: (captchaUrl: string) => void,\n}\n\ntype PropTypes = mapStateType & mapDispatchType;\n\nconst LoginContainer: React.FC<PropTypes> = (props) => {\n    return (\n        <Login {...props}/>\n    );\n};\n\nexport default connect<mapStateType, mapDispatchType, null, stateType>(\n    (state: stateType): mapStateType => {\n        return {\n            isAuth: state.auth.isAuth,\n            captchaUrl: state.auth.captchaUrl,\n        }\n    },\n    (dispatch): mapDispatchType => {\n        return {\n            loginThunk,\n            getCaptchaUrlThunk,\n        }\n    }\n)(LoginContainer);"],"sourceRoot":""}